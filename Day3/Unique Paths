Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right

My optimal Solution :
Time complexity : O(m*n)
Space complexity : O(m*n)

class Solution {
public:
    int uniquePaths(int m, int n) {
        
        vector<vector<int>> res(m,vector<int>(n,1));
        
        for(int i=1; i<m; i++)
        {
            for(int j=1; j<n; j++)
            {
                res[i][j] = res[i-1][j] + res[i][j-1];
            }
        }
        
        return res[m-1][n-1];
    }
};

Another optimal solution:
Time complexity : O(m*n)
Space complexity : O(1)

public class Solution {
    public int uniquePaths(int m, int n) {
        if(m == 1 || n == 1)
            return 1;
        m--;
        n--;
        if(m < n) {              // Swap, so that m is the bigger number
            m = m + n;
            n = m - n;
            m = m - n;
        }
        long res = 1;
        int j = 1;
        for(int i = m+1; i <= m+n; i++, j++){       // Instead of taking factorial, keep on multiply & divide
            res *= i;
            res /= j;
        }
            
        return (int)res;
    }
}
