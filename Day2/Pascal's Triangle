Input: 5
Output:

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]


My solution:
Time complexity : O(n)
Space Complexity : O(n*n)

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        
        vector<vector<int>> triangle;
        
        if(numRows == 0)
            return triangle;
        
        
        vector<int> first_row;         
        first_row.push_back(1);        
        triangle.push_back(first_row);
        
        
        for(int i = 1; i < numRows; i++)
        {
            vector<int> prevRow = triangle.at(i-1);           
            vector<int> ans;            
            ans.push_back(1);            
            
            for(int j = 1; j < i; j++)
            {
                ans.push_back((prevRow.at(j-1) + prevRow.at(j)));
            }
            
            ans.push_back(1);            
            triangle.push_back(ans);
        }
        
        return triangle;
    }
};


Optimal Solution:
Time complexity : O(n)
Space Complexity : O(n*n)

class Solution {
public:
    vector<vector<int> > generate(int numRows) {
        vector<vector<int>> r(numRows);

        for (int i = 0; i < numRows; i++) {
            r[i].resize(i + 1);
            r[i][0] = r[i][i] = 1;
  
            for (int j = 1; j < i; j++)
                r[i][j] = r[i - 1][j - 1] + r[i - 1][j];
        }
        
        return r;
    }
};
