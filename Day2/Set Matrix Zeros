Example 1:

Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]


Example 2:

Input: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
Output: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]

My Solution :
Time complexity : O(m*n)
Space complexity : O(m*n)

#include <bits/stdc++.h>
using namespace std;

 void call(vector<vector<int>>& a,int r,int c,int m,int n)
    {
        // for rows
        for(int i=0; i<m; i++)
            a[r][i] = 0;
        
        // for columns
        for(int i=0; i<n; i++)
            a[i][c] = 0;
    }
    
int main() {
	vector<vector<int>> matrix{{1,1,1},
		                       {1,0,1},
		                       {1,1,1}};
	
	int m = matrix.size() , n = matrix[0].size();
    vector<vector<int>> res(m,vector<int>(n));
    
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
	            	res[i][j] = 1;
            }
        }
        
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(matrix[i][j] == 0)
                {
                     // turn row and column to zero
                    call(res,i,j,m,n);  
                }
            }
        }
        
        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
              matrix[i][j] = res[i][j];
            }
        }
	return 0;
}


Optimal solution :
Time complexity : O(m*n)
Space complexity : O(1)

void setZeroes(vector<vector<int> > &matrix) {
    int col0 = 1, rows = matrix.size(), cols = matrix[0].size();

    for (int i = 0; i < rows; i++) {
        if (matrix[i][0] == 0) col0 = 0;
        for (int j = 1; j < cols; j++)
            if (matrix[i][j] == 0)
                matrix[i][0] = matrix[0][j] = 0;
    }

    for (int i = rows - 1; i >= 0; i--) {
        for (int j = cols - 1; j >= 1; j--)
            if (matrix[i][0] == 0 || matrix[0][j] == 0)
                matrix[i][j] = 0;
        if (col0 == 0) matrix[i][0] = 0;
    }
}
