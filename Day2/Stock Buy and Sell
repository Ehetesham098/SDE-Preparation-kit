Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.


My solution :
Time complexity :O(n)
Space complexity: O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int ans = 0;
        for(int i = 0;i<prices.size();i++){
            int left = prices[i];
            while(i<prices.size() && prices[i]>=left){
                ans = max(prices[i]-left,ans);
                i++;

            }
            i--;
        }
        return ans;
    }
};

Optimal solution with less no of code :
Time complexity :O(n)
Space complexity: O(1)

public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur += prices[i] - prices[i-1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
