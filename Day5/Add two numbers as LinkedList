Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

My solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        
        ListNode *res = NULL, *q;
        int c = 0;
        while(l1 && l2)
        {
            int a = l1 -> val , b = l2 -> val;
            
            if(!res)
            {
            res = new ListNode((a+b+c)%10);
            q = res;
            }
            else
           { 
            res ->next= new ListNode((a+b+c)%10);
            res = res -> next;
           }
            
            c = (a+b+c)/10; 
            
            l1 = l1->next;
            l2 = l2->next;
        }
        
        while(l1 || l2)
        {
            if(l1)
            {
            res ->next= new ListNode((l1->val+ c)%10);
            c = (l1 -> val + c)/10;
            res = res -> next;
                l1 = l1 -> next;
            }
            if(l2)
            {
               
            res ->next= new ListNode((l2->val+ c)%10);
                 c = (l2 -> val + c)/10;
            res = res -> next;
                l2 = l2 -> next;
            }
        }
        
        if(c)
        {
            res ->next= new ListNode(c);
            res = res -> next;
        }
        
        return q;
    }
};

optimal solution:

ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    ListNode preHead(0), *p = &preHead;
    int extra = 0;
    while (l1 || l2 || extra) {
        int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;
        extra = sum / 10;
        p->next = new ListNode(sum % 10);
        p = p->next;
        l1 = l1 ? l1->next : l1;
        l2 = l2 ? l2->next : l2;
    }
    return preHead.next;
}
