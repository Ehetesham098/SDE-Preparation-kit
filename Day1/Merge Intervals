Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


My solution:
Time complexity : O(nlogn)
Space Complexity : O(n)

class Solution {
public:    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        if(intervals.size() > 1)
        {
            sort(intervals.begin(),intervals.end());
            vector<vector<int>> res;        
        
        vector<int> t = vector<int>(intervals[0]);
        
        for(int i=1;i<intervals.size(); ++i)
        {
            if(t[1] < intervals[i][0])
            {
                res.emplace_back(t);
                t = vector<int>(intervals[i]);
            }
            else
            {
                t[1] = max(t[1] , intervals[i][1]);
            }      
        }            
        res.emplace_back(t);
        return res;
        }
        else
            return intervals;       
    }
    
};
