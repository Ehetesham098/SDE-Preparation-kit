Example 1:

Input: [3,0,1]
Output: 2

Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8


My solution :
Time complexity: O(nlogn)
Space complexity : O(1)

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        
        int c ;
        int n = nums.size();
        sort(nums.begin() , nums.end());
        
        for(int i=0;i<n;i++)
        {
            if(nums[i] != i)
            {
                c = i;
                break;
            }
        }
        
        return c;
    }
};


Optimal solution:
Time complexity : O(n)
Space Complexity : O(1)

int missingNumber(vector<int>& nums) {
    long n = nums.size();
    return n * (n+1) / 2 - accumulate(begin(nums), end(nums), 0);
}
