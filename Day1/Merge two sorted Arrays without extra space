Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]


My solution :
Time complexity : O(n)
Space Complexity : O(1)

class Solution {
public:
    

    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        
       int j=0; 
       for(int i=nums1.size()-1; i>=0 && j <n;i--)
       {
           if(nums1[i] == 0)
               swap(nums1[i],nums2[j++]);
       }
        sort(nums1.begin(),nums1.end());
        
       
    }
};


Optimal Solution:
Time complexity : O(n)
Space Complexity : O(1)

class Solution {
public:
    void merge(int A[], int m, int B[], int n) {
        int i=m-1;
		int j=n-1;
		int k = m+n-1;
		while(i >=0 && j>=0)
		{
			if(A[i] > B[j])
				A[k--] = A[i--];
			else
				A[k--] = B[j--];
		}
		while(j>=0)
			A[k--] = B[j--];
    }
};
