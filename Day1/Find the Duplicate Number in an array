Example 1:

Input: [1,3,4,2,2]
Output: 2


Example 2:

Input: [3,1,3,4,2]
Output: 3

My Solution :
Time & space complexity : O(n)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        
        set<int> s;
        for(int i=0; i<nums.size(); i++)
        {
            if(s.find(nums[i]) != s.end())
            {
                return nums[i];
            }
            
            s.insert(nums[i]);
        }
        
        return -1;
    }
};


OPtimal Solution :
Time complexity : O(n)
Space Complexity : O(1)
Algorithm : Floyd's Tortoise and Hare (Cycle Detection)

int findDuplicate3(vector<int>& nums)
{
	if (nums.size() > 1)
	{
		int slow = nums[0];
		int fast = nums[nums[0]];
		while (slow != fast)
		{
			slow = nums[slow];
			fast = nums[nums[fast]];
		}

		fast = 0;
		while (fast != slow)
		{
			fast = nums[fast];
			slow = nums[slow];
		}
		return slow;
	}
	return -1;
}
