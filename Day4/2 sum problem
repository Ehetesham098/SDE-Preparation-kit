Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


My optimal solution :
Time conplexity : O(n)
Space complexity :O(n)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
     unordered_map<int,int> mp;
     vector<int> res;
    for(int i=0;i<nums.size();i++)
    {
        if(mp.find(target-nums[i]) != mp.end())
        {
            res.push_back(mp[target - nums[i]]);
            res.push_back(i);
        }
        
        mp[nums[i]]=i;
    }
        
     return res;
    }
};
